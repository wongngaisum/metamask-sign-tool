{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","hexToString","hex","match","Error","length","bytes","n","code","parseInt","substr","push","arrayOfBytesToString","arr","map","x","toString","join","sign","state","web3","eth","personal","utils","toHex","signStr","account","err","signature","setState","signedStr","updateSignStr","event","target","value","a","window","ethereum","Web3","console","log","net","getId","enable","error","getAccounts","accounts","this","onChange","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"khBAgGeA,E,kDA3Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,YAAc,SAAAC,GACZ,IAAKA,EAAIC,MAAM,kBACb,MAAM,IAAIC,MAAM,wBAEdF,EAAIG,OAAS,IAAM,IACrBH,EAAM,IAAMA,GAGd,IADA,IAAII,EAAQ,GACHC,EAAI,EAAGA,EAAIL,EAAIG,OAAQE,GAAK,EAAG,CACtC,IAAIC,EAAOC,SAASP,EAAIQ,OAAOH,EAAG,GAAI,IACtCD,EAAMK,KAAKH,GAEb,OAAOF,GArBU,EAwBnBM,qBAAuB,SAAAC,GACrB,OAAOA,EAAIC,KAAI,SAAUC,GAAI,OAAkC,IAA1BA,EAAEC,SAAS,IAAIX,OAAe,IAAMU,EAAEC,SAAS,IAAMD,EAAEC,SAAS,OAAQC,KAAK,KAzBjG,EA4DnBC,KAAO,WACL,OAAO,EAAKC,MAAMC,KAAKC,IAAIC,SAASJ,KAAK,EAAKC,MAAMC,KAAKG,MAAMC,MAAM,EAAKL,MAAMM,SAAU,EAAKN,MAAMO,SAAS,SAACC,EAAKC,GAChH,EAAKC,SAAS,CAACC,UAAWF,QA9Db,EAkEnBG,cAAgB,SAACC,GACf,EAAKH,SAAS,CACZJ,QAASO,EAAMC,OAAOC,SAjExB,EAAKf,MAAQ,CACXM,QAAS,GACTK,UAAW,IALI,E,4FA4BnB,8BAAAK,EAAA,0DAEMC,OAAOC,SAFb,wBAGIjB,EAAO,IAAIkB,IAAKF,OAAOC,UACvBE,QAAQC,IAAIJ,OAAOC,UAJvB,KAKIE,QALJ,SAKsBnB,EAAKC,IAAIoB,IAAIC,QALnC,+BAKYF,IALZ,mCAQYJ,OAAOC,SAASM,SAR5B,0DAWMJ,QAAQK,MAAR,MAXN,gCAeWR,OAAOhB,OAEdA,EAAOgB,OAAOhB,KACdmB,QAAQC,IAAI,4BAlBhB,yBAqByBpB,EAAKC,IAAIwB,cArBlC,QAqBQC,EArBR,OAsBEP,QAAQC,IAAIpB,EAAKC,IAAIyB,UAErBC,KAAKlB,SACH,CACET,OACAM,QAASoB,EAAS,KA3BxB,0D,0EA4CA,WACE,OACE,gCACE,gCACE,wIACA,uBACEZ,MAAOa,KAAK5B,MAAMM,QAClBuB,SAAUD,KAAKhB,gBAEjB,wBAAQkB,QAASF,KAAK7B,KAAtB,yBAEF,8BACE,8CAAiB6B,KAAK5B,MAAMW,sB,GArFpBoB,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9644b49.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      signStr: '',\r\n      signedStr: ''\r\n    };\r\n  }\r\n\r\n  hexToString = hex => {\r\n    if (!hex.match(/^[0-9a-fA-F]+$/)) {\r\n      throw new Error('is not a hex string.');\r\n    }\r\n    if (hex.length % 2 !== 0) {\r\n      hex = '0' + hex;\r\n    }\r\n    var bytes = [];\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n      var code = parseInt(hex.substr(n, 2), 16)\r\n      bytes.push(code);\r\n    }\r\n    return bytes;\r\n  }\r\n\r\n  arrayOfBytesToString = arr => {\r\n    return arr.map(function (x) {return (x.toString(16).length === 1 ? '0' + x.toString(16) : x.toString(16));}).join('');\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let web3;\r\n    if (window.ethereum) {\r\n      web3 = new Web3(window.ethereum);\r\n      console.log(window.ethereum);\r\n      console.log(await web3.eth.net.getId());\r\n      try {\r\n        // Request account access if needed\r\n        await window.ethereum.enable();\r\n        // Acccounts now exposed\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    // Legacy dapp browsers...\r\n    else if (window.web3) {\r\n      // Use Mist/MetaMask's provider.\r\n      web3 = window.web3;\r\n      console.log('Injected web3 detected.');\r\n    }\r\n  \r\n    const accounts = await web3.eth.getAccounts();\r\n    console.log(web3.eth.accounts);\r\n\r\n    this.setState(\r\n      {\r\n        web3,\r\n        account: accounts[0],\r\n      }\r\n    );\r\n  }\r\n\r\n  sign = () => {\r\n    return this.state.web3.eth.personal.sign(this.state.web3.utils.toHex(this.state.signStr), this.state.account, (err, signature) => {\r\n        this.setState({signedStr: signature});\r\n      });\r\n  }\r\n\r\n  updateSignStr = (event) => {\r\n    this.setState({\r\n      signStr: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div>Input data to be signed:  Will be prepended by \"\\x19Ethereum Signed Message:\\n â€– len(message)\"</div>\r\n          <input\r\n            value={this.state.signStr}\r\n            onChange={this.updateSignStr}\r\n          />\r\n          <button onClick={this.sign}>GENERATE</button>\r\n        </div>\r\n        <div>\r\n          <div>Signature: {this.state.signedStr}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}